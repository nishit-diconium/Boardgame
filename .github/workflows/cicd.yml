---
name: CICD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
      - name: Build with Maven
        run: mvn package --file pom.xml
      - uses: actions/upload-artifact@v4
        with:
          name: Boardgame
          path: target/*.jar
      - name: Trivy FS Scan
        run: |
          trivy fs --format table -o trivy-fs-report.html .
      - name: SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker build image
        run: |
          docker build -t nishit-diconium/boardgame:latest .
      - name: Trivy Image Scan
        run: >
          trivy image --format table -o trivy-image-report.html
          nishit-diconium/boardgame:latest
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push docker image
        run: |
          docker push nishit-diconium/boardgame:latest
      - name: Kubectl Action
        uses: tale/kubectl-action@v1
        with:
          base-64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get svc -n webapps
      
